import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
"""
Task: Analyze how participants’ self-reported ethnicities relate to the NPCs
they chose to talk to first and second in Task 3.

Inputs:
- npc_ethnicity_order.csv (generated by race_extraction.py), which contains for each
  participant:
    * Participant ID
    * Specific Ethnicity
    * Broad Ethnicity
    * First NPC
    * Second NPC

Steps:
1. Map each participant’s Broad Ethnicity into a broader "Race Group"
   (e.g., European → White, East Asian → Asian, etc.).
2. For each Race Group, calculate proportions of which NPC ethnicities were
   chosen first and second.
3. Visualize results using heatmaps (proportions of NPCs by race group).
4. Also compute a combined view (first + second NPCs) with another heatmap.
5. Plot bar charts showing the distribution of participants per Race Group
   and per Broad Ethnicity.

Outputs:
- Heatmaps (displayed) for first, second, and combined NPC choices.
- Bar plots of participant counts by Race Group and Broad Ethnicity.
- Printed counts of participants per Race Group and Broad Ethnicity.
"""

# Load cleaned results
results_df = pd.read_csv("npc_ethnicity_order.csv")
# Define mapping from Broad Ethnicity to Race Group
race_group_map = {
    # White
    "European": "White",
    "Middle Eastern": "White",
    "North African": "White",
    "Turkish": "White",
    "Caucasian": "White",

    # Black or African
    "African": "Black or African",
    "Caribbean": "Black or African",
    "Afro-European": "Black or African",

    # Asian
    "East Asian": "Asian",
    "South Asian": "Asian",
    "Southeast Asian": "Asian",
    "Central Asian": "Asian",
    "Other Asian": "Asian",

    # Hispanic or Latino/a
    "Latino": "Hispanic or Latino/a",
    "South American": "Hispanic or Latino/a",
    "Central American": "Hispanic or Latino/a",

    # Indigenous
    "Native American": "Indigenous or First Nations",
    "Indigenous South American": "Indigenous or First Nations",
    "First Nations": "Indigenous or First Nations",
    "Aboriginal": "Indigenous or First Nations",

    # Mixed
    "Mixed": "Mixed or Multiple Ethnicities",
    "Multiethnic": "Mixed or Multiple Ethnicities"
}

# Apply mapping
results_df['Race Group'] = results_df['Broad Ethnicity'].map(race_group_map).fillna("Other / Unspecified")


# Function to plot heatmap
def plot_heatmap(df, column, title):
    pivot = df.pivot_table(index='Race Group', columns=column, aggfunc='size', fill_value=0)
    proportions = pivot.div(pivot.sum(axis=1), axis=0)
    plt.figure(figsize=(12, 7))
    sns.heatmap(proportions, annot=True, cmap='YlGnBu', fmt=".2f")
    plt.title(f"Proportion of {title} NPC Talked to by Broad Ethnicity")
    plt.ylabel("Participant Broad Ethnicity")
    plt.xlabel("NPC Ethnicity")
    plt.tight_layout()
    plt.show()

# Plot for first, second, and combined NPCs
plot_heatmap(results_df, 'First NPC', 'First')
plot_heatmap(results_df, 'Second NPC', 'Second')

# Melt for combined analysis
combined_df = pd.melt(results_df, id_vars=['Race Group'], value_vars=['First NPC', 'Second NPC'],
                      var_name='Position', value_name='NPC')
plot_heatmap(combined_df.rename(columns={'NPC': 'First NPC'}), 'First NPC', 'Combined (First + Second)')


ethnicity_counts = results_df['Race Group'].value_counts().sort_values(ascending=False)
print("\nNumber of Participants per Broad Ethnicity:")
print(ethnicity_counts)

plt.figure(figsize=(10, 6))
ethnicity_counts.plot(kind='bar', color='teal')
plt.title("Number of Participants per Race Group")
plt.ylabel("Number of Participants")
plt.xlabel("Race Group")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

ethnicity_counts = results_df['Broad Ethnicity'].value_counts().sort_values(ascending=False)
print("\nNumber of Participants per Broad Ethnicity:")
print(ethnicity_counts)
plt.figure(figsize=(10, 6))
ethnicity_counts.plot(kind='bar', color='teal')
plt.title("Number of Participants per Broad Ethnic Group")
plt.ylabel("Number of Participants")
plt.xlabel("Broad Ethnic Group Group")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()